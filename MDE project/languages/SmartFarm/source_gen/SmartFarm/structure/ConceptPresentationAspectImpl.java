package SmartFarm.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AI;
  private ConceptPresentation props_Camera;
  private ConceptPresentation props_Crate;
  private ConceptPresentation props_Crop;
  private ConceptPresentation props_Drone;
  private ConceptPresentation props_Farm;
  private ConceptPresentation props_Light;
  private ConceptPresentation props_Sensor;
  private ConceptPresentation props_Soil;
  private ConceptPresentation props_Temperature;
  private ConceptPresentation props_Water;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AI:
        if (props_AI == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("AI");
          props_AI = cpb.create();
        }
        return props_AI;
      case LanguageConceptSwitch.Camera:
        if (props_Camera == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("camera");
          props_Camera = cpb.create();
        }
        return props_Camera;
      case LanguageConceptSwitch.Crate:
        if (props_Crate == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Crate = cpb.create();
        }
        return props_Crate;
      case LanguageConceptSwitch.Crop:
        if (props_Crop == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("crop");
          props_Crop = cpb.create();
        }
        return props_Crop;
      case LanguageConceptSwitch.Drone:
        if (props_Drone == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("drone");
          props_Drone = cpb.create();
        }
        return props_Drone;
      case LanguageConceptSwitch.Farm:
        if (props_Farm == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Farm = cpb.create();
        }
        return props_Farm;
      case LanguageConceptSwitch.Light:
        if (props_Light == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("light");
          props_Light = cpb.create();
        }
        return props_Light;
      case LanguageConceptSwitch.Sensor:
        if (props_Sensor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("sensor");
          props_Sensor = cpb.create();
        }
        return props_Sensor;
      case LanguageConceptSwitch.Soil:
        if (props_Soil == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Soil");
          props_Soil = cpb.create();
        }
        return props_Soil;
      case LanguageConceptSwitch.Temperature:
        if (props_Temperature == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Temperature");
          props_Temperature = cpb.create();
        }
        return props_Temperature;
      case LanguageConceptSwitch.Water:
        if (props_Water == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Water");
          props_Water = cpb.create();
        }
        return props_Water;
    }
    return null;
  }
}
