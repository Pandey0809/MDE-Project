package SmartFarm.constraints;

/*Generated by MPS */

import jetbrains.mps.core.aspects.constraints.rules.BaseRulesConstraintsDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.constraints.rules.Rule;
import jetbrains.mps.core.aspects.constraints.rules.kinds.ContainmentContext;
import java.util.List;
import java.util.Collections;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.core.aspects.constraints.rules.BaseRule;
import org.jetbrains.mps.openapi.model.SNodeReference;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.core.aspects.constraints.rules.RuleId;
import jetbrains.mps.core.aspects.constraints.rules.kinds.PredefinedRuleKinds;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SProperty;

public final class Crop_ConstraintRules extends BaseRulesConstraintsDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x835d7f18a2604c9dL, 0xa7a7f5480713c93dL, 0x4868eb0de61d6aa6L, "SmartFarm.structure.Crop");

  public static final Rule<ContainmentContext> check_id5217678613241026524 = new Rule_Length1();
  public static final Rule<ContainmentContext> check_id5217678613241039559 = new Rule_Length2();

  private static final List<Rule<?>> RULES = Collections.unmodifiableList(Arrays.<Rule<?>>asList(check_id5217678613241026524, check_id5217678613241039559));

  @NotNull
  @Override
  public List<Rule<?>> getDeclaredRules() {
    return RULES;
  }

  public static final class Rule_Length1 extends BaseRule<ContainmentContext> {
    private static final SNodeReference SOURCE_NODE_REF = PersistenceFacade.getInstance().createNodeReference("r:749842ab-8d39-4035-bf44-90b85f30be8a(SmartFarm.constraints)/5217678613241026524");
    public static final RuleId ID_Length1 = new RuleId(5217678613241026524L, SOURCE_NODE_REF);

    public Rule_Length1() {
      super(CONCEPT, PredefinedRuleKinds.CAN_BE_CHILD, ID_Length1, SOURCE_NODE_REF);
    }

    @Override
    public boolean check(@NotNull ContainmentContext context) {
      return SPropertyOperations.getString(context.getChildNode(), PROPS.croptype$rpl6).length() < 256;
    }

    @Override
    public boolean appliesTo(@NotNull ContainmentContext context) {
      return true;
    }
  }

  public static final class Rule_Length2 extends BaseRule<ContainmentContext> {
    private static final SNodeReference SOURCE_NODE_REF = PersistenceFacade.getInstance().createNodeReference("r:749842ab-8d39-4035-bf44-90b85f30be8a(SmartFarm.constraints)/5217678613241039559");
    public static final RuleId ID_Length2 = new RuleId(5217678613241039559L, SOURCE_NODE_REF);

    public Rule_Length2() {
      super(CONCEPT, PredefinedRuleKinds.CAN_BE_CHILD, ID_Length2, SOURCE_NODE_REF);
    }

    @Override
    public boolean check(@NotNull ContainmentContext context) {
      return SPropertyOperations.getString(context.getChildNode(), PROPS.croptype$rpl6).length() > 0;
    }

    @Override
    public boolean appliesTo(@NotNull ContainmentContext context) {
      return true;
    }
  }

  /*package*/ Crop_ConstraintRules() {
    super(CONCEPT);
  }

  private static final class PROPS {
    /*package*/ static final SProperty croptype$rpl6 = MetaAdapterFactory.getProperty(0x835d7f18a2604c9dL, 0xa7a7f5480713c93dL, 0x4868eb0de61d6aa6L, 0x4868eb0de61d6aa7L, "croptype");
  }
}
